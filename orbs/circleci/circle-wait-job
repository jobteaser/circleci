#!/usr/bin/env ruby

require("optparse")
require("net/http")
require("json")
require("date")

class CLI
  attr_reader(:token, :organization, :project, :job, :current_job, :branch, :interval, :vcs, :build_number)

  def initialize
    @branch = ENV["CIRCLE_BRANCH"]
    # interval is specified in seconds
    @interval = "60"
    @vcs = "github"
    @build_number = ENV["CIRCLE_BUILD_NUM"]
    @token = ENV["CIRCLE_TOKEN"]
    @current_job = ENV["CIRCLE_JOB"]
    @job = ENV["CIRCLE_JOB"]
    @organization = ENV["CIRCLE_PROJECT_USERNAME"]
    @project = ENV["CIRCLE_PROJECT_REPONAME"]
  end

  def parse(args)
    OptionParser.new do |parser|
      define_options!(parser)
      parser.parse!(args)
    end

    must_not_empty("branch", @branch)
    must_not_empty("interval", @interval)
    must_not_empty("vcs", @vcs)
    must_not_empty("current-build-number", @build_number)
    must_not_empty("token", @token)
    must_not_empty("job", @job)
    must_not_empty("current_job", @current_job)
    must_not_empty("organization", @organization)
    must_not_empty("project", @project)

    self
  end

  private

  def must_not_empty(key, value)
    if value.to_s.empty?
      raise(ArgumentError, "the #{key} is missing or empty")
    end
  end

  def define_options!(parser)
    parser.banner = "Usage: circleci-wait-job OPTIONS"
    parser.separator("")
    parser.separator("OPTIONS")
    parser.separator("")

    parser.on("-t=VALUE", "--token=VALUE", "the circleci api token") { |value| @token = value }
    parser.on("-o=VALUE", "--organization=VALUE", "the circleci organization name") { |value| @organization = value }
    parser.on("-p=VALUE", "--project=VALUE", "the circleci project name") { |value| @project = value }
    parser.on("-j=VALUE", "--job=VALUE", "the circleci job name") { |value| @job = value }
    parser.on("-c=VALUE", "--current_job=VALUE", "the circleci currently running job name") { |value| @current_job = value }
    parser.on("-b=VALUE", "--branch=VALUE", "the circleci branch") { |value| @branch = value }
    parser.on("-i=VALUE", "--interval=VALUE", "the wait time between pooling") { |value| @interval = value }
    parser.on("--vcs=VALUE", "the version control system (default: github)") { |value| @vcs = value }
    parser.on("--current-build-number=VALUE", "the current circleci build number") { |value| @build_number = value }

    parser.on_tail("-h", "--help", "print help and exit") do
      puts(parser)
      exit(0)
    end

    parser.on_tail("--version", "print version and exit") do
      puts("v0.0.1")
      exit(0)
    end
  end
end

cli = CLI.new

begin
  options = cli.parse(ARGV)
rescue ArgumentError => e
  puts(e.message)
  exit(1)
end

uri = URI::HTTPS.build(host: "circleci.com",
                       path: File.join("/",
                                       "api",
                                       "v1.1",
                                       "project",
                                       options.vcs.to_s,
                                       options.organization.to_s,
                                       options.project.to_s,
                                       "tree",
                                       options.branch.to_s),
                       query: URI.encode_www_form({"circle-token" => options.token.to_s,
                                                   "shallow" => true,
                                                   "filter" => "running"}))


def other_job_is_running?(uri, job, current_job, build_num)
  response = Net::HTTP.get(uri)
  builds = JSON.parse(response)

  # Check if another identical job (most likely a production deployment job) is running for another build
  has_concurrent_job = builds.any? do |build|
    is_concurrent_build = build.dig("workflows", "job_name").to_s == job

    puts("Checking #{build.dig("build_url")}...")
    puts("\t" + (is_concurrent_build ? "Is a concurrent build!" : "Not a concurrent build."))

    is_concurrent_build
  end

  puts(
    "\n" +
    (has_concurrent_job ? "Found concurrent job" : "No concurrent job found")
  )

  if has_concurrent_job
    return true
  else
    puts("Check that no other builds are currently running job #{current_job}...")
    # We know that no "production deployment job" is running but there is a possibility that 2 builds are
    # running the same job as the current one simultaneously. This means that both builds could enter a
    # "production deployment job" at the same time after the present job is done. We must avoid it.
    # Check if another other build is running the same job as the current one (most likely a
    # concurrent_build_management job).
    # Iterate on builds and regroup builds by job name in a dict:
    # Ex: { concurrent_build_management: [build1, build2], test_js: [build3], ...}
    builds_by_job_name = Hash.new
    builds.each_entry do |build|
      build_job_name = build.dig("workflows", "job_name").to_s
      builds_by_job_name[build_job_name] = builds_by_job_name[build_job_name] || []
      builds_by_job_name[build_job_name].push(build)
    end

    # Look for builds that have a job name == current_job since the present script is expected to
    # be called for a job whose concurrent run is not allowed
    concurrent_builds_for_current_job = builds_by_job_name[current_job]

    if !concurrent_builds_for_current_job || concurrent_builds_for_current_job.length() == 0
      puts "No builds running job #{current_job} were found."
      return false
    end

    puts "Checking which concurrent build is the oldest (from commit perspective)..."

    # Find build for the oldest code
    oldestBuild = concurrent_builds_for_current_job.first
    oldestCommitDate = DateTime.parse(oldestBuild.dig("committer_date"))
    concurrent_builds_for_current_job.each_entry do |build|
      puts "Comparing build #{build.dig("build_url")} with commit date #{build.dig("committer_date")}"
      buildCommitDate = DateTime.parse(build.dig("committer_date"))
      if buildCommitDate <= oldestCommitDate
        puts "\tBuild is older"
        oldestCommitDate = buildCommitDate
        oldestBuild = build
      else
        puts "\tBuild is newer"
      end
    end

    if build_num == oldestBuild.dig("build_num")
      puts "\nCurrent build has the oldest code, it can continue running"
      return false
    else
      puts "\nCurrent build has code more recent that another one running, it must wait"
      return true
    end
  end
end

puts("Check no other #{options.job} for #{options.branch} branch is running.")

while other_job_is_running?(uri, options.job.to_s, options.current_job.to_s, options.build_number.to_i) do
  puts("Another #{options.job} for #{options.branch} branch already running, check again in #{options.interval} seconds.\n")
  sleep(options.interval.to_i)
end
