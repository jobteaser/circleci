#!/usr/bin/env sh

set -eu

fatal() {
    printf "$*\n" >/dev/stderr
    exit 1
}

usage() {
    cat <<EOF
usage: $0 OPTIONS <name>

OPTIONS

-h display help
-p tag pattern (default: $pattern)
EOF
}

pattern="*"

OPTIND=1
while getopts 'hp:' arg; do
    case "$arg" in
	h) usage; exit 0 ;;
	p) pattern="$OPTARG" ;;
	?) fatal "unknown option" ;;
    esac
done
shift $((OPTIND - 1))

if [ ! -d ".git" ]; then
    fatal "no git repository found"
fi

last_tag=$(git tag --sort version:refname --list "$pattern" | tail -1)
# There are no tags at all
if [ -z "$last_tag" ]; then
    exit 0
fi

deployed_sha1=$(git rev-parse "$last_tag")
current_sha1=$(git rev-parse HEAD)

# List commits behind the latest deployment tag, to see if the current commit is not behind.
# Exclude the tagged commit itself so we can redeploy an already deployed, and thus tagged,
# commit.
# Why isn't it enough to check that "${deployed_sha1}" != "${current_sha1}"?
if { git rev-list "^${deployed_sha1}" | grep -q "${current_sha1}" ; }
then
    fatal "the current build is older than the deployed one"
fi
