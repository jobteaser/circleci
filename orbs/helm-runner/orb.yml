version: 2.1

description: |
  Use Helm with circleci runner in workflows.

executors:
  deploy:
    machine: true
    resource_class: "jobteaser/helm"

commands:
  configure_kubernetes_client:
    description: "Configure the kubernetes client."
    parameters:
      kubernetes_namespace:
        description: "The Kubernetes namespace."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME"
      kubernetes_endpoint:
        description: "The URL of the Kubernetes API endpoint."
        type: string
        default: "$K8S_ENDPOINT"
      kubernetes_ca_cert:
        description: "The CA certificate of the Kubernetes API server."
        type: string
        default: "$K8S_CA_CERT_STAGING"
      kubernetes_user_token:
        description: "The Kubernetes user token."
        type: string
        default: "$K8S_USER_TOKEN_STAGING"
    steps:
      - run:
          name: "Configure the kubernetes client"
          command: |
            echo "<<parameters.kubernetes_ca_cert>>" | base64 -d >/tmp/k8s-ca-cert.pem
            kubectl config set-cluster circleci.cluster \
              --certificate-authority=/tmp/k8s-ca-cert.pem \
              --server=<<parameters.kubernetes_endpoint>>
            kubectl config set-context circleci.context \
              --cluster=circleci.cluster
            kubectl config set-credentials circleci \
              --token=<<parameters.kubernetes_user_token>>
            kubectl config set-context circleci.context \
              --user=circleci \
              --namespace=<<parameters.kubernetes_namespace>>
            kubectl config use-context circleci.context

  check_helm_chart:
    description: "Check the Helm chart using the Helm linter."
    parameters:
      helm_chart_path:
        description: "The path of the Helm chart."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME"
      helm_value_file_path:
        description: "The path of the extra value file to apply."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME/$HELM_VALUE_FILE_NAME"
    steps:
      - run:
          name: "Check the Helm chart"
          command: |
            helm lint \
              -f <<parameters.helm_value_file_path>> \
              --set=circleci.sha1=$CIRCLE_SHA1 \
              --set=circleci.branch=$CIRCLE_BRANCH \
              <<parameters.helm_chart_path>>

  expand_helm_templates:
    description: "Expand and store Helm templates as artifacts."
    parameters:
      environment:
        description: "The runtime environment."
        type: string
        default: "prod"
      kubernetes_namespace:
        description: "The Kubernetes namespace."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME"
      helm_chart_path:
        description: "The path of the Helm chart."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME"
      helm_value_file_path:
        description: "The path of the extra value file to apply."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME/$HELM_VALUE_FILE_NAME"
      helm_release_name:
        description: "The Helm release name."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME-$CIRCLE_BRANCH"
    steps:
      - run:
          name: "Expand Helm templates"
          command: |
            mkdir -p /tmp/helm-templates/<<parameters.environment>>
            helm template \
              <<parameters.helm_release_name>> <<parameters.helm_chart_path>> \
              -n <<parameters.kubernetes_namespace>> \
              -f <<parameters.helm_value_file_path>> \
              --set=circleci.sha1=$CIRCLE_SHA1 \
              --set=circleci.branch=$CIRCLE_BRANCH \
              --output-dir /tmp/helm-templates/<<parameters.environment>>
      - store_artifacts:
          path: "/tmp/helm-templates/<<parameters.environment>>"

  tag_deployment:
    parameters:
      environment:
        description: "The runtime environment."
        type: string
        default: "prod"
    steps:
      - run:
          name: "Configure Git"
          command: |
            git config --global user.email "dev@jobteaser.com"
            git config --global user.name "Jobtomate CircleCI"
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run:
          name: "Tag the deployment"
          command: |
            tag="deployment-<<parameters.environment>>-$(date -u +'%Y%m%d%H%M%S%N')"
            git tag $tag
            git push origin $tag

jobs:
  push:
    parameters:
      helm_repo_url:
        description: "Helm repository URL"
        default: "$HELM_REPO_URL"
        type: string
      helm_repo_user:
        description: "Helm repository username"
        default: "$HELM_REPO_USER"
        type: string
      helm_repo_pass:
        description: "Helm repository password"
        default: "$HELM_REPO_PASS"
        type: string
      helm_chart_path:
        description: "The path of the Helm chart."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME"
    executor: "deploy"
    steps:
      - run:
          name: "Checkout K8S files."
          command: |
            git clone -b $CIRCLE_BRANCH --depth 1 --filter=blob:none \
            --sparse $CIRCLE_REPOSITORY_URL . \
            && git sparse-checkout set k8s
      - run:
          name: "Push Helm chart to remote repo"
          command: |
            cd <<parameters.helm_chart_path>>
            helm plugin install https://github.com/chartmuseum/helm-push
            helm repo add --username <<parameters.helm_repo_user>> --password <<parameters.helm_repo_pass>> jobteaser-private <<parameters.helm_repo_url>>
            helm repo add jobteaser-public https://jobteaser.github.io/charts
            helm repo update
            helm dep update
            helm push . jobteaser-private
  deploy:
    parameters:
      environment:
        description: "The runtime environment."
        type: string
        default: "prod"
      docker_image:
        description: "The docker image to deploy."
        type: string
        default: "jobteaser/$CIRCLE_PROJECT_REPONAME"
      docker_tag:
        description: "The tag of the docker image to deploy."
        type: string
        default: "git-$CIRCLE_SHA1"
      kubernetes_namespace:
        description: "The Kubernetes namespace."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME"
      kubernetes_endpoint:
        description: "The URL of the Kubernetes API endpoint."
        type: string
        default: "$K8S_ENDPOINT"
      kubernetes_ca_cert:
        description: "The CA certificate of the Kubernetes API server."
        type: string
        default: "$K8S_CA_CERT_STAGING"
      kubernetes_user_token:
        description: "The Kubernetes user token."
        type: string
        default: "$K8S_USER_TOKEN_STAGING"
      helm_chart_path:
        description: "The path of the Helm chart."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME"
      helm_release_name:
        description: "The Helm release name."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME-$CIRCLE_BRANCH"
      helm_wait_for_ready:
        description: "Whether or not to wait for the pods being actually ready."
        type: boolean
        default: true
      helm_upgrade_timeout:
        description: "The amount of time to wait for the Helm release upgrade to finish in seconds."
        type: integer
        default: 300
      helm_value_file_path:
        description: "The path of the extra value file to apply."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME/$HELM_VALUE_FILE_NAME"
      no_output_timeout:
        description: "The amount of time CircleCI waits for before killing the job if it gives no output"
        type: string
        default: "15m"
      check_helm_chart:
        description: "Whether to check the Helm configuration or not."
        type: boolean
        default: true
      tag_deployment:
        description: "Whether to create a deployment Git tag or not."
        type: boolean
        default: false
      prevent_parallel_deployments:
        default: true
        description:
          Whether to wait for other deployment on master to finish

          The default is to serialize deployments on the master branch.
          You can allow parallel deployment by setting this parameter to
          false.

          Note that for branches other than master, you might consider
          pipelines auto-cancellation instead of letting the build run
          its full course.
          https://circleci.com/docs/2.0/skip-build/#auto-cancelling-a-redundant-build
        type: boolean
    executor: "deploy"
    steps:
      - when:
          condition: <<parameters.prevent_parallel_deployments>>
          steps:
            - run:
                name: "Wait for all other builds to complete"
                command: |
                  circle-wait-job
      - run:
          name: "Checkout K8S files."
          command: |
            git clone -b $CIRCLE_BRANCH --depth 1 --filter=blob:none \
            --sparse $CIRCLE_REPOSITORY_URL . \
            && git sparse-checkout set k8s 
      - run:
          name: "Ensure that this build is more recent than the last deployed one"
          command: |
            deployable -p "deployment-<<parameters.environment>>-*"
      - configure_kubernetes_client:
          kubernetes_ca_cert: "<<parameters.kubernetes_ca_cert>>"
          kubernetes_endpoint: "<<parameters.kubernetes_endpoint>>"
          kubernetes_user_token: "<<parameters.kubernetes_user_token>>"
          kubernetes_namespace:  "<<parameters.kubernetes_namespace>>"
      - run:
          name: "Initialize Helm"
          command: |
            cd <<parameters.helm_chart_path>>
            helm repo add jobteaser https://jobteaser.github.io/charts
            helm dep update
      - when:
          condition: <<parameters.check_helm_chart>>
          steps:
            - check_helm_chart:
                helm_chart_path: "<<parameters.helm_chart_path>>"
                helm_value_file_path: "<<parameters.helm_value_file_path>>"
      - expand_helm_templates:
          environment: "<<parameters.environment>>"
          helm_chart_path: "<<parameters.helm_chart_path>>"
          helm_release_name: "<<parameters.helm_release_name>>"
          helm_value_file_path: "<<parameters.helm_value_file_path>>"
      - run:
          name: "Print install/upgrade command in case we need to run it manually"
          no_output_timeout: <<parameters.no_output_timeout>>
          command: |
            echo helm upgrade \
              <<parameters.helm_release_name>> <<parameters.helm_chart_path>> \
              --namespace=<<parameters.kubernetes_namespace>> \
              -f <<parameters.helm_value_file_path>> \
              --set=circleci.sha1=$CIRCLE_SHA1 \
              --set=circleci.branch=$CIRCLE_BRANCH \
              --set=image=<<parameters.docker_image>>:<<parameters.docker_tag>> \
              --wait=<<parameters.helm_wait_for_ready>> \
              --timeout=<<parameters.helm_upgrade_timeout>>s \
              --install
      - run:
          name: "Install or upgrade the Helm release"
          no_output_timeout: <<parameters.no_output_timeout>>
          command: |
            helm upgrade \
              <<parameters.helm_release_name>> <<parameters.helm_chart_path>> \
              --namespace=<<parameters.kubernetes_namespace>> \
              -f <<parameters.helm_value_file_path>> \
              --set=circleci.sha1=$CIRCLE_SHA1 \
              --set=circleci.branch=$CIRCLE_BRANCH \
              --set=image=<<parameters.docker_image>>:<<parameters.docker_tag>> \
              --wait=<<parameters.helm_wait_for_ready>> \
              --timeout=<<parameters.helm_upgrade_timeout>>s \
              --install
      - when:
          condition: <<parameters.tag_deployment>>
          steps:
            - tag_deployment:
                environment: "<<parameters.environment>>"
