version: 2.1

description: |
  Standard jobs for services using the erl-service Erlang application.

orbs:
  service: "jobteaser/service@dev:master"
  docker: "jobteaser/docker@dev:master"

executors:
  ci:
    docker:
      - image: "jobteaser/erl-service-ci:latest"
        auth:
          username: "$DOCKER_LOGIN"
          password: "$DOCKER_PASSWORD"

jobs:
  test:
    parameters:
      executor:
        description: "The executor to use for the job."
        type: "executor"
        default: "ci"
    executor: "<<parameters.executor>>"
    steps:
      - service/configure_ssh
      - service/configure_git
      - checkout
      - run:
          # Build before even running dialyzer to get all errors associated
          # with dependencies, Rebar3, or the execution environment right now.
          name: "Build the project"
          command: |
            make build
      - run:
          name: "Run type analysis"
          command: |
            make dialyzer
      - run:
          name: "Run tests"
          command: |
            make test

  build:
    parameters:
      executor:
        description: "The executor to use for the job."
        type: "executor"
        default: "ci"
    executor: "<<parameters.executor>>"
    steps:
      - service/configure_ssh
      - service/configure_git
      - checkout
      - service/generate_build_info
      - run:
          name: "Build the project"
          command: |
            # We need two versions of the release tarbalL: one to be archived
            # as artifact named after the project and Git hash, and one with a
            # fixed name to be used by the docker/build_image step. We could
            # use a Docker build argument to point to the right tarball, but
            # it would require having a way to pass them to the corresponding
            # CircleCI command. Let us keep it simple for the time being.
            make release
            tarball=./release/$CIRCLE_PROJECT_REPONAME-$CIRCLE_SHA1.tar.gz
            if [ ! -f $tarball ]; then
              echo "missing release tarball at $tarball" >&2
              exit 1
            fi
            tarball=./release/service.tar.gz
            if [ ! -f $tarball ]; then
              echo "missing release tarball at $tarball" >&2
              exit 1
            fi
      - store_artifacts:
          path: "./release"
      - docker/setup
      - docker/login
      - docker/build_image
      - docker/check_image_trivy
      - docker/push_image
