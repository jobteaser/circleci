version: 2.1

description: |
  Use Helm in your workflows.

executors:
  deploy:
    docker:
      - image: "jobteaser/circleci-helm-deploy:latest"
        auth:
          username: "$DOCKER_LOGIN"
          password: "$DOCKER_PASSWORD"

commands:
  configure_kubernetes_client:
    description: "Configure the kubernetes client."
    parameters:
      kubernetes_namespace:
        description: "The Kubernetes namespace."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME"
      kubernetes_endpoint:
        description: "The URL of the Kubernetes API endpoint."
        type: string
        default: "$K8S_ENDPOINT"
      kubernetes_ca_cert:
        description: "The CA certificate of the Kubernetes API server."
        type: string
        default: "$K8S_CA_CERT_STAGING"
      kubernetes_user_token:
        description: "The Kubernetes user token."
        type: string
        default: "$K8S_USER_TOKEN_STAGING"
    steps:
      - run:
          name: "Configure the kubernetes client"
          command: |
            echo "<<parameters.kubernetes_ca_cert>>" | base64 -d >/tmp/k8s-ca-cert.pem
            kubectl config set-cluster circleci.cluster \
              --certificate-authority=/tmp/k8s-ca-cert.pem \
              --server=<<parameters.kubernetes_endpoint>>
            kubectl config set-context circleci.context \
              --cluster=circleci.cluster
            kubectl config set-credentials circleci \
              --token=<<parameters.kubernetes_user_token>>
            kubectl config set-context circleci.context \
              --user=circleci \
              --namespace=<<parameters.kubernetes_namespace>>
            kubectl config use-context circleci.context

  check_helm_chart:
    description: "Check the Helm chart using the Helm linter."
    parameters:
      helm_chart_path:
        description: "The path of the Helm chart."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME"
      helm_value_file_path:
        description: "The path of the extra value file to apply."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME/$HELM_VALUE_FILE_NAME"
    steps:
      - run:
          name: "Check the Helm chart"
          command: |
            helm lint \
              -f <<parameters.helm_value_file_path>> \
              --set=circleci.sha1=$CIRCLE_SHA1 \
              --set=circleci.branch=$CIRCLE_BRANCH \
              <<parameters.helm_chart_path>>

  expand_helm_templates:
    description: "Expand and store Helm templates as artifacts."
    parameters:
      environment:
        description: "The runtime environment."
        type: string
        default: "prod"
      helm_chart_path:
        description: "The path of the Helm chart."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME"
      helm_value_file_path:
        description: "The path of the extra value file to apply."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME/$HELM_VALUE_FILE_NAME"
      helm_release_name:
        description: "The Helm release name."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME-$CIRCLE_BRANCH"
    steps:
      - run:
          name: "Expand Helm templates"
          command: |
            mkdir -p /tmp/helm-templates/<<parameters.environment>>
            helm template \
              -n <<parameters.helm_release_name>> \
              -f <<parameters.helm_value_file_path>> \
              --set=circleci.sha1=$CIRCLE_SHA1 \
              --set=circleci.branch=$CIRCLE_BRANCH \
              --output-dir /tmp/helm-templates/<<parameters.environment>> \
              <<parameters.helm_chart_path>>
      - store_artifacts:
          path: "/tmp/helm-templates/<<parameters.environment>>"

  tag_deployment:
    parameters:
      environment:
        description: "The runtime environment."
        type: string
        default: "prod"
    steps:
      - run:
          name: "Configure Git"
          command: |
            git config --global user.email "dev@jobteaser.com"
            git config --global user.name "Jobtomate CircleCI"
      - run:
          name: "Tag the deployment"
          command: |
            tag="deployment-<<parameters.environment>>-$(date -u +'%Y%m%d%H%M%S%N')"
            git tag $tag
            git push origin $tag

jobs:
  push:
    parameters:
      helm_repo_url:
        description: "Helm repository URL"
        default: "$HELM_REPO_URL"
        type: string
      helm_repo_user:
        description: "Helm repository username"
        default: "$HELM_REPO_USER"
        type: string
      helm_repo_pass:
        description: "Helm repository password"
        default: "$HELM_REPO_PASS"
        type: string
      helm_chart_path:
        description: "The path of the Helm chart."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME"
    executor: "deploy"
    steps:
      - checkout
      - run:
          name: "Push Helm chart to remote repo"
          command: |
            cd <<parameters.helm_chart_path>>
            helm init --client-only
            helm plugin install https://github.com/chartmuseum/helm-push
            helm repo add --username <<parameters.helm_repo_user>> --password <<parameters.helm_repo_pass>> jobteaser-private <<parameters.helm_repo_url>>
            helm repo add jobteaser-public https://jobteaser.github.io/charts
            helm repo update
            helm dep update
            helm push . jobteaser-private
  deploy:
    parameters:
      environment:
        description: "The runtime environment."
        type: string
        default: "prod"
      docker_image:
        description: "The docker image to deploy."
        type: string
        default: "jobteaser/$CIRCLE_PROJECT_REPONAME"
      docker_tag:
        description: "The tag of the docker image to deploy."
        type: string
        default: "git-$CIRCLE_SHA1"
      kubernetes_namespace:
        description: "The Kubernetes namespace."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME"
      kubernetes_endpoint:
        description: "The URL of the Kubernetes API endpoint."
        type: string
        default: "$K8S_ENDPOINT"
      kubernetes_ca_cert:
        description: "The CA certificate of the Kubernetes API server."
        type: string
        default: "$K8S_CA_CERT_STAGING"
      kubernetes_user_token:
        description: "The Kubernetes user token."
        type: string
        default: "$K8S_USER_TOKEN_STAGING"
      helm_chart_path:
        description: "The path of the Helm chart."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME"
      helm_release_name:
        description: "The Helm release name."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME-$CIRCLE_BRANCH"
      helm_upgrade_timeout:
        description: "The amount of time to wait for the Helm release upgrade to finish in seconds."
        type: integer
        default: 300
      helm_value_file_path:
        description: "The path of the extra value file to apply."
        type: string
        default: "./k8s/$CIRCLE_PROJECT_REPONAME/$HELM_VALUE_FILE_NAME"
      check_helm_chart:
        description: "Whether to check the Helm configuration or not."
        type: boolean
        default: true
      tag_deployment:
        description: "Whether to create a deployment Git tag or not."
        type: boolean
        default: false
    executor: "deploy"
    steps:
      - run:
          name: "Wait for all other builds to complete"
          command: |
            circle-wait-job
      - checkout
      - run:
          name: "Ensure that this build is more recent than the last deployed one"
          command: |
            deployable -p "deployment-<<parameters.environment>>-*"
      - configure_kubernetes_client:
          kubernetes_ca_cert: "<<parameters.kubernetes_ca_cert>>"
          kubernetes_endpoint: "<<parameters.kubernetes_endpoint>>"
          kubernetes_user_token: "<<parameters.kubernetes_user_token>>"
          kubernetes_namespace:  "<<parameters.kubernetes_namespace>>"
      - run:
          name: "Initialize Helm"
          command: |
            cd <<parameters.helm_chart_path>>
            helm init --client-only
            helm repo add jobteaser https://jobteaser.github.io/charts
            helm dep update
      - when:
          condition: <<parameters.check_helm_chart>>
          steps:
            - check_helm_chart:
                helm_chart_path: "<<parameters.helm_chart_path>>"
                helm_value_file_path: "<<parameters.helm_value_file_path>>"
      - expand_helm_templates:
          environment: "<<parameters.environment>>"
          helm_chart_path: "<<parameters.helm_chart_path>>"
          helm_release_name: "<<parameters.helm_release_name>>"
          helm_value_file_path: "<<parameters.helm_value_file_path>>"
      - run:
          name: "Install or upgrade the Helm release"
          command: |
            helm upgrade \
              --tiller-namespace=<<parameters.kubernetes_namespace>> \
              --namespace=<<parameters.kubernetes_namespace>> \
              -f <<parameters.helm_value_file_path>> \
              --set=circleci.sha1=$CIRCLE_SHA1 \
              --set=circleci.branch=$CIRCLE_BRANCH \
              --set=image=<<parameters.docker_image>>:<<parameters.docker_tag>> \
              --wait --timeout=<<parameters.helm_upgrade_timeout>> \
              --install <<parameters.helm_release_name>> <<parameters.helm_chart_path>>
      - when:
          condition: <<parameters.tag_deployment>>
          steps:
            - tag_deployment:
                environment: "<<parameters.environment>>"


  delete_branch_deployment:
    executor: deploy
    parameters:
      helm_chart_path:
        default: "./k8s/$CIRCLE_PROJECT_REPONAME"
        description: "The path of the Helm chart."
        type: string
      helm_release_base:
        default: "$CIRCLE_PROJECT_REPONAME"
        description: "Base for helm release names"
        type: string
      kubernetes_ca_cert:
        default: "$K8S_CA_CERT_STAGING"
        description: "User authentification token to be granted deployment rights"
        type: string
      kubernetes_endpoint:
        description: "The URL of the Kubernetes API endpoint."
        type: string
        default: "$K8S_ENDPOINT"
      kubernetes_namespace:
        description: "The Kubernetes namespace."
        type: string
        default: "$CIRCLE_PROJECT_REPONAME"
      kubernetes_user_token:
        description: "User authentification token to be granted deployment rights"
        type: string
        default: "$K8S_USER_TOKEN_STAGING"
    steps:
      - checkout  # Grab bits of git history.
      - configure_kubernetes_client:
          # We use env. var to make "sure" those cannot be accidentally
          # overidden. That way somewhat cannot accidentally delete
          # deployments in production. It does not prevent someone from
          # overriding the value in his/her repo .circleci/config.yml
          # file, but that would no longer be accidental)
          # If someone use the wrong context, the variable will be undefined.
          kubernetes_ca_cert: "$K8S_CA_CERT_STAGING"
          # Could use similar precaution here ? (not as-is: variable name
          # shared between prod & staging)
          kubernetes_endpoint: "<<parameters.kubernetes_endpoint>>"
          # Same as above here
          kubernetes_user_token: "$K8S_USER_TOKEN_STAGING"
          kubernetes_namespace:  "<<parameters.kubernetes_namespace>>"
      - run:
          name: "Initialize Helm"
          command: |
            helm init --client-only
      - run:
          name: "Delete development deployments"
          command: |
            # Ensures last commit is a merge commit (by def as more than 1 parent,
            # in practice has 2 parents). Wouldn't know how to handle the case
            # where the merge has more than 2 parents so we do nothing in any other
            # case
            [ 2 -ne "$(git log --pretty=%P -n 1 HEAD | wc -w)" ] && exit 0
            # Get branch name from "standard" merge commit (brittle, how can we do better)
            MERGED_BRANCH="$(git log -1 HEAD | sed -nEe '/Merge pull request/s,^( +Merge pull request #[1-9][0-9]+ from jobteaser/)(.*)$,\2,p')"
            [ -z "$MERGED_BRANCH" ] && exit 0
            helm --tiller-namespace "<<parameters.kubernetes_namespace>>" delete --purge "<<parameters.helm_release_base>>-${MERGED_BRANCH}"
            # To be put in the helm orb ?
            # Believe it still make quite a few assumptions on the way people
            # use git:
            # - Without using `--rebase` Git pull can sometimes merge master
            #   into a devs branch. Makes for spaghetti git history but it is
            #   tough to force people to use `git pull --rebase`. And if they
            #   don't what happens.
            # - Won't work if people make fast forwards merges without a merge
            #   commit. Could motivate people not to do that.
            # What I do now, to mitigate those to issues, is add the following
            # commands to the shell script devs run to bootstrap a project they
            # just cloned:
            #
            #     git config --local pull.rebase true
            #     git config --local merge.ff false
