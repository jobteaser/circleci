version: 2.1

description: |
  Run e2e web tests from e2e_jt_tests repo

orbs:
  browser-tools: circleci/browser-tools@1.4.0
  service: "jobteaser/service@0.46.1"

executors:
  xlarge:
    parameters:
      max_instances:
        type: string
        default: "30"
    resource_class: "xlarge"
    docker:
      - image: "cimg/node:16.13-browsers"
        environment:
          DEBUG: "trace"
          E2E_MAX_INSTANCES: << parameters.max_instances >>
          FORCE_COLOR: "0"
  large:
    parameters:
      max_instances:
        type: string
        default: "30"
    resource_class: "large"
    docker:
      - image: "cimg/node:16.13-browsers"
        environment:
          DEBUG: "trace"
          E2E_MAX_INSTANCES: << parameters.max_instances >>
          FORCE_COLOR: "0"
  medium:
    parameters:
      max_instances:
        type: string
        default: "30"
    docker:
      - image: "cimg/node:16.13-browsers"
        environment:
          DEBUG: "trace"
          E2E_MAX_INSTANCES: << parameters.max_instances >>
          FORCE_COLOR: "0"
  small:
    parameters:
      max_instances:
        type: string
        default: "30"
    resource_class: "small"
    docker:
      - image: "cimg/node:16.13-browsers"
        environment:
          DEBUG: "trace"
          E2E_MAX_INSTANCES: << parameters.max_instances >>
          FORCE_COLOR: "0"
  browserstack:
    docker:
      - image: "cimg/node:16.13-browsers"
        environment:
          DEBUG: "trace"

commands:
  clone_test_suite:
    description: "Clone test suite configuration"
    parameters:
      branch:
        description: "Branch to clone"
        type: "string"
        default: "master"
    steps:
      - run:
          name: "clone the test suite"
          command: |
            git clone -b << parameters.branch >> git@github.com:jobteaser/e2e_jt_tests.git

  check_pr:
    description: "Verify if there is a PR ready to review to run tests"
    steps:
      - run:
          name: "Verify PR status"
          command: |
            if [ -v $CIRCLE_PULL_REQUEST ]; then
                echo "No PR opened, tests will not run"
                circleci-agent step halt
                exit 0
            fi
            PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST| awk -F"pull/" '{print $2}')
            RESPONSE=$(curl --silent \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER
            )
            DRAFT=$(echo $RESPONSE | grep -oE '"draft": (true|false)' )

            if [[ $DRAFT == *'true'* ]]; then
              echo "Draft PR, do not run tests"
              circleci-agent step halt
              exit 0
            else
              echo "Non Draft PR, tests will be run"
            fi

  manage_dependencies:
    description: "Use cache management for dependencies or install fresh ones"
    steps:
      - restore_cache:
          key: npm-dep-{{ .Branch }}-{{ checksum "e2e_jt_tests/package-lock.json" }}
      - run:
          working_directory: e2e_jt_tests
          name: "install dependencies"
          command: |
            npm i
      - save_cache:
          key: npm-dep-{{ .Branch }}-{{ checksum "e2e_jt_tests/package-lock.json" }}
          paths:
            - ./e2e_jt_tests/node_modules

  create_report_folder:
    description: "Create reports directory"
    steps:
      - run:
          working_directory: e2e_jt_tests
          name: "create reports directory"
          command: |
            mkdir -p reports

  run_e2e_test:
    parameters:
      tags:
        type: string
        default: "not @flaky and not @pending and not @browserstack and not @prod"
      command:
        description: "The command to run in e2e_jt_tests repo"
        type: "string"
        default: "npm run chrome"
      bypass_rack_attack_cookie:
        description: "The cookie to add to bypass rate limit"
        type: "string"
        default: $BYPASS_RACK_ATTACK
      no_rl_cloudflare_cookie:
        description: "The cookie to add to bypass rate limit of CloudFlare"
        type: "string"
        default: $NO_RL_CLOUDFLARE
      find_suites_tags_script_path:
        type: string
        default: script/find_correct_tests_ui_jobteaser.sh
      browser:
        type: string
        default: "chrome"
    steps:
      - when:
          condition:
            equal: [ chrome, << parameters.browser >> ]
          steps:
            - browser-tools/install-chrome:
                replace-existing: true
            - browser-tools/install-chromedriver
      - when:
          condition:
            equal: [ firefox, << parameters.browser >> ]
          steps:
            - browser-tools/install-firefox
            - browser-tools/install-geckodriver
      - run:
          name: "Find tags to run, halt if no tags matched or run tests"
          command: |
            if [ ! -z "<< parameters.find_suites_tags_script_path >>" ]; then
              if [ ! "$CIRCLE_PROJECT_REPONAME" = 'e2e_jt_tests' ]; then
                git clone -b $CIRCLE_BRANCH git@github.com:jobteaser/$CIRCLE_PROJECT_REPONAME.git
              fi
              cd ${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}/$CIRCLE_PROJECT_REPONAME/
              ./<< parameters.find_suites_tags_script_path >>
              SUITES=$(cat SELECTED_SUITES)
              TAGS=$(cat SELECTED_TAGS)
            else
              SUITES=''
              TAGS="<< parameters.tags >>"
            fi
            if [ "$TAGS" = '' ]; then
                echo "No tests to run for this commit"
                circleci-agent step halt
                exit 0
            fi
            export BYPASS_RACK_ATTACK=<< parameters.bypass_rack_attack_cookie >>
            export NO_RL_CLOUDFLARE=<< parameters.no_rl_cloudflare_cookie >>
            cd ${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}/e2e_jt_tests/
            echo "Tags to run: $TAGS"
            CUCUMBER_TAGS=$TAGS << parameters.command >> $SUITES

  generate_reporting:
    description: "generate reports"
    steps:
      - store_artifacts:
          path: "e2e_jt_tests/reports/webdriverServer/"
      - store_test_results:
          path: "e2e_jt_tests/reports/junit/"
      - run:
          working_directory: e2e_jt_tests
          name: "Compile allure report"
          when: "always"
          command: npm run allure:build
      - store_artifacts:
          path: "e2e_jt_tests/reports/allure-report"

  slack_alerting:
    description: "Generate slack notification in case of failure"
    steps:
      - run:
          name: "Publish report"
          working_directory: e2e_jt_tests
          command: |
            if [ ! -z $CIRCLE_PULL_REQUEST ]; then
              PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST| awk -F"pull/" '{print $2}')
              RESPONSE=$(curl --silent \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls/$PR_NUMBER
              )
              DRAFT=$(echo $RESPONSE | grep -oE '"draft": (true|false)' )

              if [[ $DRAFT == *'true'* ]]; then
                echo "Draft PR, do not notify on slack"
                circleci-agent step halt
                exit 0
              else
                echo "Non Draft PR, notify on slack"
              fi
            fi
            npm run slackArtifactURL
          when: always

jobs:
  execute_e2e_tests:
    parameters:
      tags:
        type: string
        default: "not @pending and not @browserstack and not @prod"
      find_suites_tags_script_path:
        type: string
        default: ""
      executor_type:
        type: executor
        default: "xlarge"
      branch:
        description: "Branch to clone"
        type: "string"
        default: "master"
      command:
        description: "The command to run in e2e_jt_tests repo"
        type: "string"
        default: "npm run chrome"
      bypass_rack_attack_cookie:
        description: "The cookie to add to bypass rate limit"
        type: "string"
        default: $BYPASS_RACK_ATTACK
      no_rl_cloudflare_cookie:
        description: "The cookie to add to bypass rate limit of Cloudflare"
        type: "string"
        default: $NO_RL_CLOUDFLARE
      channel:
        description: Channel slack notifications
        type: string
        default: "notif-e2e-master"
      ciToken:
        description: CircleCI Token
        type: string
        default: "$CIRCLE_CI_HM_TOKEN"
      browser:
        description: Browser name
        type: string
        default: "chrome"
    executor: "<< parameters.executor_type >>"
    steps:
      - service/configure_ssh
      - clone_test_suite:
          branch: << parameters.branch >>
      - manage_dependencies
      - create_report_folder
      - run_e2e_test:
          command: << parameters.command >>
          bypass_rack_attack_cookie: << parameters.bypass_rack_attack_cookie >>
          no_rl_cloudflare_cookie: << parameters.no_rl_cloudflare_cookie >>
          tags: << parameters.tags >>
          find_suites_tags_script_path: << parameters.find_suites_tags_script_path >>
          browser: << parameters.browser >>
      - generate_reporting
      - slack_alerting
      